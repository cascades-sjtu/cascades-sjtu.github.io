[ { "title": "艮寅路xxx号语言艺术培训营实录", "url": "/posts/sjtu-hunan-admission-review/", "categories": "misc", "tags": "", "date": "2022-07-04 00:00:00 +0800", "snippet": " 很想分享一些最近的感悟，但由于博客内容的隐蔽性，我只想让我希望分享的对象看懂博客的意思，也希望这些读者们能够有所收获吧为什么写这篇博客作为培训营的营长之一，我从第一天开始就对我的营员们做出了展望，向他们列举了在培训营中可能的收获。从那时候开始，我就期待在培训营结束后，能够听到他们亲口说出自己在培训营中的收获与成长。我也希望能够在一个合适的场合，将我多年来参加培训营的感悟分享给大家。由于邯郸路的某几只蝴蝶扇动了一下翅膀，今年的培训营是在匆忙中结束的。可能是由于我一直在给训练营备课，所以我没有能来得及做一个正式的总结，只是凭借临时组织的语言和大家在欢声笑语中度过了最后的一个小时。现在我想再组织一下语言，就当作给大家的告别礼了。听众的艺术鉴赏 VS 你们的艺术鉴赏培训营最重要的主题就是，如何吸引你的听众，影响你的听众。有经验的听众可能不会听信一个初登舞台几年的表演者的说辞，但新听众则恰恰相反。可能在某次表演之前，新听众就已经收到了很多老听众的影响，会认为自己已经有能力去鉴别你在演讲中用到的艺术手法，并提取出真实的内容。但实际上恰恰相反。我的营员们，你们其实也体会到了，你们的舞台表现是可以改变新听众对于整个培训营和背后的公司的感受，甚至是引发他们对于自己原有的艺术鉴赏的思考的。当你们向这些新的听众表演时，你们表现出来的是对于高雅艺术的追求时，对于多样化艺术的向往；也是对于现在社会某些低俗艺术的风潮，比如千篇一律，直指流量和金钱的抖音短视频的鄙夷。我相信很多考生们都会被你们的表演所打动。不过，你们此时是否真是如你们所说的这么想的呢？可能最开始你们作为新听众的时候，听到这样的论断会产生共鸣。但当你们已经踏入艺术的大门，学习了这么久后，逐渐认识到了追求这样的高雅艺术是理想化的，不是人人都有机会在这条路上一直走下去。此时，你们的初心还是一样吗？当听到做海螺乐器的艺术家可以年薪35万的时候，我看到大家脸上充满了羡慕；但当谈到自己冷门、传统的艺术领域时，我却听到的抱怨和无奈。我认为这是一种焦虑和迷茫的表现，其实我时常也有这样的表现。但通过自我的回顾后，我发现这样的焦虑和迷茫对提高你自身的艺术水平毫无帮助，更不用说之后艺术成果转化的问题了。我认为，在我们初学一门艺术时，更应该注重基本功的锻炼，注重对于整个艺术领域来龙去脉的理解，以及培养自己对于这个领域的兴趣。如果上述三个工作做的足够扎实，到后面你的艺术道路才会越走越开阔。要和别人推销一个自己都不太认同的艺术观是一件很闹心的事情，大家这些天很多时候都在反复做这样的事情，我很同情你们。但我觉得也是可以借着与新老听众交流的机会，再重新审视一下自己的艺术观，也欢迎你们与我交流。阳春白雪，各有所爱" }, { "title": "2022年开源操作系统训练营学习笔记", "url": "/posts/rust-based-os-comp2022/", "categories": "course, website", "tags": "self-learning, rust", "date": "2022-07-01 00:00:00 +0800", "snippet": " 之前一直就想完完整整地做一次操作系统的Lab，但值得学习的课程资料实在是太多了，经典的xv6，modern的OSTEP，包括IPADS的ChCore…不过借着清华这样一次开源操作系统训练营的机会，就从rCore开始吧，这篇博客用来记录我在训练营中的笔记7.1 Day1今天仔细看了本次训练营的大概内容1，主要关注workload，目前看来代码量不是特别大，每天做一点的话应该是能完成的，关键在于要多提问题并记录在issue中 在学习实践过程记录表上登记自己每日/周学习记录情况的repo网址，并在这个repo上记录每日/周学习记录情况 (成绩分数：20%) 在第一阶段学习issues上的提问和回答问题情况，在第一阶段OS学习项目 、 rCore Tutorial v3的详细实验指导内容 上的Pull Request提交情况（代码改进、文档改进、文档错误等） (成绩分数：15%) step 0 要求的编程代码的完成情况 (成绩分数：15%) step 2 第一阶段OS学习项目的5个实验的完成情况 (成绩分数：50%)7.2 Day2今天进行了第零章：实验环境配置的工作。其实我在之前就配置过 rCore 相关的 Qemu，riscv64-gnu 工具链和 Rust 开发环境了，所以很流畅地就把 hello world 给跑起来了。不过我也尝试了一下 Github classroom 的新功能，感觉还是挺有意思，可以通过 CI 的方式来提交作业。就是可能受到网速和云主机的影响，运行起来没有那么快，这也是 cloud editing 的一些通病吧。最后决定还是使用本地开发了，明天开始看看 Rust 系统编程的资料，捡一捡 Rust 语言基础。7.3 Day3今天开始step0 自学Rust编程。咋一眼看上去觉得 Rust 的教程太多了，比我之前自己整理的./2022-04-20-Rust-learning-record.md多了不知道哪里去了。不过还是不能一口气吃个大胖子，先按照训练营的要求来做吧。由于我之前已经做过 rustlings 了， 所以直接开始做 32 Rust Quizes，对照着教程复习一些语法的知识，顺便把 writeup 写在下面。这个练习的难度相对来说比 rustlings 要难，需要理解 rust macro，还包括了一些 corner case。所以也不要给自己太大压力了，先求了解吧。 Rust 宏定义以及参数传递。Rust 宏和 C 的字符串预处理不同，是带有语义类型的替换 使用 Rustfmt 进行语义分析，闭包，impl trait const 修饰符用于直接替换，即修改的是临时变量。值的命名空间和变量的命名空间不一样 .. 可以代表通配的元素或者是切片中的 RangeFull，u8 类型的 ASCII 值 闭包参数的类型推断 变量覆盖，可以手动借助中间变量推断，赋值语句的值为()，是 zero-sized type match arm 和 enum 类型的匹配，prelude 提前引入了 Result::Ok 和 Option::Some macro_rules! 中 token 的组织，单个 token 的字符数，例如 ==&amp;gt; 被解析为了 == &amp;gt; opaque exporession token dyn Trait 函数指针之间不要相互比较，延迟生命周期绑定 Drop 的时机和所有者有关 ZST 可以同时有多个可变引用，且他们指向同一位置，但不存在解引用的操作 impl Trait 的作用范围在程序的全局，auto-ref 机制 Trait 在作用时的类型推断 Rust 没有自增和自减的一元运算符，--x = -(-x) 同16，解析的结果为a-- - --b = a - (-(-(-(-b)))) 调用成员变量的函数指针 VS 调用成员函数 s 的所有权发生了转移，但直到程序括号结束后才被移除，从而调用 Drop return 表达式需要先被求值再被返回，break-with-value 表达式，return 和 break 的eager consume 行为不同 判断是 || true 的闭包函数还是 ()，break-with-value 表达式 判断宏参数包含的 token 个数，默认 - 为单独的 token，也可以将整个负数解析为一个 token 默认调用内置方法和不可变引用 宏的变量默认使用局部变量，const 代表的不是局部变量，会被覆盖掉 函数将返回值的所有权转移给调用者，但返回值作为类型，没有接受的变量，所以被 Drop 了两次 Iterator::map 中的闭包是跟随实际的迭代器，延迟调用的 Supertrait，动态分发和静态分发 let _ = Guard 后立马调用 Drop，因为没有 owner 了 1-tuple 需要显式地表示，但多元 tuple 不需要；intergral literal 默认被推断为 i32 &amp;amp;ZST 的大小不为0，&amp;amp;T 和 Rc&amp;lt;T&amp;gt; 都默认实现 Clone trait 函数签名的匹配顺序和 auto-ref 机制的配合 match arm 中的 if 语句会作用于尽可能多的 arm (|| .. .method())() = (|| ..).method()，随后再调用返回的闭包完结证明：7.4 Day4今天继续昨天的 32 Rust Quizes，不过训练营的要求又改动了，所以还需要在 Github Classroom 里面额外复习一遍 rustlings。 在学习实践过程记录表上登记自己每日/周学习记录情况的repo网址，并在这个repo上记录每日/周学习记录情况 (成绩分数：20%) 学习记录的标杆，这是一位本科生的自学ucore for x86的过程记录，是大家学习的榜样，供大家学习参考。 在第一阶段学习issues上的提问和回答问题情况，在第一阶段OS学习项目 、 rCore Tutorial v3的详细实验指导内容 上的Pull Request提交情况（代码改进、文档改进、文档错误等） (成绩分数：15%) step 0 要求的Rust-lang Lab Test based on Rustlings（采用Github Classroom模式的Rustling小练习） 的完成情况 (成绩分数：15%) step 2 第一阶段OS学习的5个实验的完成情况 (成绩分数：50%)，详情看课程网站2 Rust 部分打算跟着张汉东老师的视频复习吧，当作是增加理解了7.5 Day5在 codespace 上搭建了 rustlings 的练习环境，跟着张老师的视频。因为之前做过 rustlings 了，所以感觉视频有些无聊，于是便开始自己先按照节奏把前面简单的部分做完了。但张老师的思路是对的，做这样的练习不在于做的多快多正确，而是要理解题目背后的逻辑。之后有时间也可以看看 rustlings 本身的代码。今天开会后加了老师，助教和一些营员的微信，准备和 ShiLi 同学组个队。此外，还加了几个飞书的群聊，多接受一些 Rust 资讯吧。7.6 Day6今天做完了 rustlings 剩下的部分，和第一次做的时候相比来说更加多了些经验，也在不断学习官方的一些写法，重构之前的练习代码，比如 match arm 的妙用。同时，也增加了对于错误处理和类型转换两个主题的理解（之前做的时候可能没仔细看）。本质上说，都是实现 trait，不过是根据 Rust 一些规定的要求来实现 trait，从而能够使用一些内置的函数（比如 from 和 parse）。在实现 trait 的过程中，我对于编译器报错的阅读能力也增加了。完结证明（顺便吐槽一下 auto-grading 的问题，只有0/100两种分数）：7.7 Day7今天开始正式做 lab 了。虽然我还没有系统性地看老师给的 RISC-V 的资料，不过还是想着边看边学吧。今天看完了第零章的导读，在我的 MBP 上配置好了环境。由于 Makefile 中有些指令在 MacOS 下的表现不太一样，所以我在云服务器上也配置了一遍环境。读第零章印象最深的三个概念就是： rCore 是按照历史发展各个阶段的 OS 形态来展开，从 libOS 到 batch OS，再到现在通用性的 OS OS 大致提供了三层的抽象 CPU -&amp;gt; 进程 物理内存 -&amp;gt; 地址空间 外设 -&amp;gt; 文件 异常控制流的定义有很多种，大概分为中断、陷入、异常。都需要 CPU 切换运行环境，并保存上下文其他的，对于一些零碎的概念（比如编译目标三元组的表示， RISCV 类型的标记）都更加熟悉了。同时，课程传达的“实践引领原理”的学习顺序也让我产生了一些思考。从第一章开始，课程开始讲解如何在裸机上编写 Rust 代码，从编译工具链的切换到 !#[no_std] 这样的声明，这都和以前在应用程序层编程的体验不同，也是 Rust 作为系统级语言必备的特性。此外，我复习了 Qemu 和计算机启动的工作原理。还做了一部分手动适配 Qemu 的工作，并简单实践了链接器脚本和 rust-objcopy --strip-all。最后，我把只包含一行汇编，经过裁剪后的内核映像在 Qemu 上跑了起来，并通过 gdb 进行了初步的调试。顺便吐槽一下，brew 提供的 riscv64-unknown-elf-gdb 需要 Python2 的支持，所以我选择直接下载 SiFive 预编译的版本。7.8 Day8今天把第一章剩下的部分看完了。理论部分主要复习了 RISCV 的调用约定，以及寄存器的作用，和 x86 的思路类似，不过 更加区分了 caller-saved 和 callee-saved 的寄存器。还学习了 log 的原理，包括如何输出 ANSI 规定的彩色字符和如何使用 RustSBI 提供的服务。实践部分，跟着示例代码完成了 Qemu 输出第一行彩色文字的过程。还把文档的源码拷贝下来，并自己构建了一份（踩了一个坑，sphinx 对 Python3.10 的支持不太友好），之后就可以本地看文档了。此外，我还看了一下第二阶段的一些选题，发现基本都是 zCore 的，感觉还是想做和系统安全相关一点的话题，不知道能不能和 penglai 这样的项目结合。7.9 Day9今天完成了第一章的课后练习题和实践部分。首先是简单写了几个应用程序，复习了关于系统调用和栈回溯的知识。随后，学习了如何通过 Log crate 来实现终端打印彩色字符，并提供日志输出的等级。我顺势完成了 lab0-0。其实本身不需要修改什么代码，主要是熟悉构建和测试过程中使用的 Makefile，复习基本语法。也尝试理解了测试的思路，大约是将每次实验的代码都重新放到一个 workspace 目录，重新构建、运行，并保存其输出结果，使用 Python 脚本进行正则匹配。这样的好处是，隔离了每次实验，坏处是增加了测试的开销。此外，user 目录下还包括了许多用于测试内核的 Rust 示例程序，并在每次测试的时候加上了随机数，保证了测试过程的完整性，这是一个很安全的思路。总结一下，第一章主要为内核代码准备了运行环境，并将 RustSBI 提供的服务封装为打印字符串的库，是一个简单的 libOS。今天还开始了第二章的学习，看到了应用程序是如何使用 ecall 指令来陷入到 S 模式进行系统调用，用户库又是如何封装出类 Linux 的系统调用的，随后还使用 qemu-riscv64 进行了实践。还有一个有意思的是，之前买的 k210 开发板，今天到货了。可以直接上电把 rCore 前几个不需要文件系统的 lab 跑起来，等之后有 sd 卡后还可以试试完整版的 rCore。但值得注意的一点是，我是跟着 rCore 的文档看的，所以需要注意和训练营的 lab 之间的差距。此外，之后看书看累的时候也可以考虑把课堂视频3看看，感觉更容易集中注意力。7.10 Day10今天把 RISCV 的特权级相关资料初步看了一下，主要是一个大会的视频和 RISC-V手册：一本开源指令集的指南的第十章。但可能自己对于 Architecture 的基础太弱了，导致看起来很费劲。所以还是接着看文档了，这样能更快地熟悉几个重要的 CSR 寄存器。7.11 Day11今天把第二章的内容都看完了，并做了课后习题。感觉增加了用户态的支持后，第二章的内容复杂了许多。在学习了其采用静态绑定+动态加载的思路后，还深入理解了系统调用的实现以及上下文保存和恢复中需要注意的顺序问题。其实以 print! 和 println! 这两个宏为例，不论是系统调用还是请求 RustSBI 的服务，它们的逻辑都是类似的。只不过，之前我们把 RustSBI 当作黑盒，但现在需要理解是如何系统软硬件来达到特权级别的切换，并分发异常的。总结下来，在编写和用户态的接口时，一定要弄清楚代码此刻处于什么特权模式，以及目前的栈布局。此外，利用 sscratch 进行内核栈和用户栈的切换，以及复用 __restore 来实现用户程序初始化这些操作都很精妙，值得细细评味。课后习题一中有一个 bug 会造成很严重的死循环，大概是由于只有 Rust 代码内部设置了 fp ，而汇编代码没有注意到，所以保存的实际是用户态进行系统调用之前的 fp ，从而导致产生访问非法地址的异常，从而循环调用 panic 中的栈回溯代码。解决的思路：要么就是调整循环结束的标志为用户态 fp 的值，要么就增加对 Exception(LoadFault) 的处理代码。总而言之，手动写汇编时一定要小心。今天还重新看了看 Makefile 中的命令参数，了解了 tmux 和 qemu-system 的一些命令参数。此外，还重新复习了用户态程序和内核态程序的链接过程，复习了链接器脚本的语法。7.12 Day12因为明天要去上海了，今天做了一些准备的工作，包括和几位国防科技大学的老师聊天了。感觉收获很多，简单记录如下： 王小峰老师：老师主要做的是网络防御这一块儿的工作，而且偏工程一点。虽然我们聊具体的科研问题不多，但是从他的口中验证了我对于现在国内科研形势的了解。他对我的科研选择也做出了肯定，希望我能多到大组里面看一看吧。 王鹏飞老师：老师在17年国外交换的时候就发过一篇 USENIX Security，可谓是新生代的科研力量了。他是做模糊测试比较多，但对于静态分析的了解也很多，尤其是对于 IR 的分析，希望之后能够有机会在寒暑假的时候过来听一听吧。对于目前，他给我的建议有以下这些： 在科研的起步阶段，先做一些轻量级，新颖的work。不要去管老大难问题，比如程序分析的一些理论上难以解决的问题。 从直接修改某个开源项目或者是论文的公开代码入手，短时间熟悉，并做一些改动 在脚踏实地地做工作的同时，也要尽快想好之后的规划。如果走学术界，每年的人才计划和基金都是一环扣一环的，要紧跟节奏才不会掉队。 老师还提醒我，不管是去大组里还是工业界实验室里工作，都要利用好学长学姐和老师的力量，而且时刻要警惕“打白工”（即只为公司创造价值）的行为，把握好自己的初心。 王戟老师：王戟老师是这里面水平最高，资历也最丰富的老师。虽然在去之前我对他的故事和背景没有做功课，但从一进门后的几句对话，就让我感受到了他的功力深厚。比如他问我固件分析是在哪个设备上做，问我是源代码的静态分析还是二进制的静态分析，问我自己对于哪个比较感兴趣。而当我说到 angr，klee 等现代化一点的工具时，他也是如数家珍，而且问了我一些深层次的问题，这也暴露了我并没有深入理解这两个工具以及基于这些工具的论文，只是浮于表面。 总而言之，老师点醒我的是，我的论文阅读的太少了，以至于一直没有开始科研的工作，还是一个“门外汉”。按照老师的思路，我应该先阅读足够多的顶会论文，再挑选出自己感兴趣地一两篇仔细地复现，培养出自己的 taste。 而对于我之前学习方式的问题，老师也利用了后向遍历比前向遍历效率高这一程序分析中的事实让我更加信服自己之前“万事俱备，只欠东风”的科研思路是有很大问题的。 总而言之，和几位老师讨论过后，我得到他们的一个共同的信号就是：摆正心态，给足信心，现在开始科研生活完全来得及。不要浮躁和眼高手低，从基础的工作做起。7.13 Day13今天在赶路，只看了第三章的引言部分，了解了第三章要做的内容是实现一个分时多任务的系统，需要改变加载应用程序的方式，并增加主动/被动切换 CPU 控制权的方法。7.14 Day14今天看了第三章的主要部分，复习了之前通过 build.rs 和内联汇编加载应用程序的方法。为了能一次性地将应用程序加载到内存，需要硬编码地指定每个应用程序的起始地址，并通过汇编中的符号表，在启动内核时将其装载。此外，为了交出控制权，需要完成两个应用的内核态栈的切换，这一部分还是通过汇编语言实现，并通过 Rust 封装成 unsafe 代码。最后，为了实现抢占式调用，需要引入 mtime 和 mtimecmp 两个寄存器，并使用到了时钟周期等概念，每隔一定的时间设置中断，并在 trap 的处理中加入硬中断的处理例程，即任务的调度算法。而在调度算法方面，目前使用了最简单的 RR 算法，还没有考虑优先级等策略。7.15 Day15今天开始做 lab1 了，重新熟悉了一下实验框架，其实只要参考 LAB1 关键字，并复用 os3-ref 的代码即可。需要注意的是对 TaskControlBlock 结构的熟悉，以及在 task/mod.rs 中对于函数的封装调用。至于具体的实现代码，其实逻辑很简单，如果遇到 unsafe 或者是权限的问题，按照编译器的提示修改即可。7.16 Day16今天在看程序分析的课程和一篇论文，大概看了第四章的引言部分。课程资料 https://github.com/LearningOS/rust-based-os-comp2022/blob/main/scheduling.md &amp;#8617; https://learningos.github.io/rust-based-os-comp2022/ &amp;#8617; https://github.com/LearningOS/rust-based-os-comp2022/blob/main/relatedinfo.md &amp;#8617; " }, { "title": "2022暑期自学计划", "url": "/posts/summer-self-learning-plan/", "categories": "misc, self-learning", "tags": "self-learning", "date": "2022-05-30 00:00:00 +0800", "snippet": " 勿在浮沙筑高台，想做出好的研究，提高CTF比赛的水平，还是要打好计算机基础国外CS课程打算从CS自学指南上选取一些计算机基础课程和安全相关的课程来进行自学。学习方式主要为看slide，写lab+project，在学习的过程中定期记录到博客。目前打算进行自学的课程列表： 名称 学校 博客 时间 CS61A UCB ./2022-05-30-summer-self-learning-plan.md 2022.05.21-2022.07.08 rCore Tsinghua ./2022-07-01-rust-based-os-comp2022.md 2022.07.01-2022.07.30 CSAPP CMU   2022.06.09-2022.06.30 CS106B/X/L Stanford   2022.07.01-2022.08.01 6.S081 MIT   2022.08.01-2022.09.01 CS143 Stanford   2022.08.01-2022.09.01 CTF从进入石楠花到现在，从简单的校赛到DEFCON Quals各种难度的比赛都算是见过了。目前自己的情况属于各种方向都了解一点，但都只能做简单的题目。嘴上虽然说自己是binary选手，但比赛中几乎没做出过re/pwn的题目。如果只是把CTF当作兴趣，这样的状态倒也还好。但如果想打出成绩，真正体会到CTF大手子的乐趣，还是要专精于一个方向。结合我的研究方向，还是选择研究二进制方向的题目吧。首先还是复习一下各个架构的指令集（x86，ARM，MIPS，RISC-V），然后可以熟悉熟悉各类自动化漏洞挖掘工具（angr，z3）和逆向分析工具（Ghidra），最后就是看看有没有自己感兴趣的方向可以钻研一下，主要还是二进制的程序分析吧（IoT，WebAssembly，MacOS，LLVM）。目前打算进行自学的内容： 资源 博客 时间 Reversing for everyone     逆向工程权威指南     decomposition     Angr examples     科研先从二进制分析的经典论文看起来吧，了解一下这个领域发展的来龙去脉。目前打算阅读的论文列表: 名称 会议 年份 博客 KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs OSDI 2008   Arbiter: Bridging the Static and Dynamic Divide in Vulnerability Discovery on Binary Programs Usenix Security 2022   All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution IEEE S&amp;amp;P 2010   Program Vulnerability Repair via Inductive Inference ISSTA 2022   " }, { "title": "使用Git来管理Microsoft Excel", "url": "/posts/excel-version-control/", "categories": "misc, git", "tags": "git, excel", "date": "2022-05-29 00:00:00 +0800", "snippet": "起因众所周知，高校办公自动化的程度目前也仅限于使用Excel来处理各类数据，但难免遇到以下几个问题： 数据量大的时候甚至打不开Excel文件 Excel和各种国产的表格软件之间存在不兼容的问题 不方便进行版本管理，往往要在命名上花很多心思和管理的成本 只能写一些简单的公式（会vlookup的就不错了），不方便做数据处理 不方便做数据的统一备份上述问题很难说用一种方案来解决，但我们可以选择优先解决在当前办公场景下成为工作效率瓶颈的那个问题。当遇到周期较长的工作，需要经常迭代时，版本管理和数据备份就成为了亟待解决的问题。一个朴素的想法是通过Git来解决这两个问题。Excel主要的文件格式为xls和xslx，本质上是xml打包压缩后的文件，所以被Git当作二进制文件。Git默认只检测二进制文件的改动情况，并不会做细粒度的diff。所以最主要的目标就是找到可以处理Excel的diff工具。Git仓库的备份服务器也需要仔细考虑。一是避免Github这样可能需要科学上网的服务器，二是减少账号注册等过程，三是可能需要提高仓库的保密性。可以通过Gitee+token+private的组合来完成。我选择自己尝试搭建一个服务器，也是增加运维经验。此外，当Excel文件较大时，由于Git需要对每次commit都备份，可能会导致仓库尺寸过大。这时候也许需要使用git-lfs来缓存一些大的二进制文件，并延迟加载不同版本的二进制文件，具体原理可以看1。工具Diff我首先发现了git-xl这样一个开源工具。但似乎效果一般，目前只能在Windows上运行，进行粗粒度的diff，而功能更全的版本则需要收费。随后我又看到了ExcelCompare。这个通过Java开发，跨平台的支持更好，也有细粒度的结果。此外，它还支持在diff的时候添加ignore的参数，来针对性地diff。但不方便的地方是只支持两个文件之间的比较，和git diff的命令格式有一些差距。excel_cmp &amp;lt;diff-flags&amp;gt; &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; [--ignore1 &amp;lt;sheet-ignore-spec&amp;gt; ..] [--ignore2 &amp;lt;sheet-ignore-spec&amp;gt; ..]最开始我想到的是手动checkout来切换版本，并导出为新的文件作为excel_cmp的输入。但在搜索issue后，我发现了更符合Git风格的做法2，背后的原理可以看3。简而言之就是将excel_cmp添加为xlsx文件的driver，当git工作时读取配置文件~/.gitconfig，便可以使用对应的工具来diff。而diff本质上也是签出对应版本的文件来进行比较，所以可以通过修改提供给diff的参数来符合excel_cmp的命令格式。# 查看与上一次commit的不同git diff ^HEAD# diff结果显示增加了一个cell，内容为testEXTRA Cell in WB1 Sheet1!A6 =&amp;gt; &#39;test&#39;----------------- DIFF -------------------Sheets: []Rows: []Cols: []----------------- EXTRA WB1 -------------------Sheets: [Sheet1]Rows: [6]Cols: [A]----------------- EXTRA WB2 -------------------Sheets: []Rows: []Cols: []-----------------------------------------Excel files Book1.xlsx and /var/folders/yq/nx698dzs09s9td0pntdr3zqw0000gn/T/Bw04LD_Book1.xlsx differfatal: external diff died, stopping at Book1.xlsx# 可以看出diff的时候是从之前commit中临时生成了新的文件Git Server大多数内部网络都是使用Gitlab来搭建内部的Git server，我则找到了一个更轻量，方便使用Docker搭建的gogs。所有环境搭建工作都是一键完成，基本的功能也有。尤其是它提供了官方的Docker镜像，从而不怕影响到我的服务器本地环境。流程目前设想的工作流大致如下： 处理表格前，先git pull 本地通过Excel处理表格，git push -u origin master到服务器上统一的仓库 管理人员定期处理PR，通过diff看改变情况 在遇到问题时可以回滚到之前的版本一些小坑目前还没有正式实践，不知道会有什么问题，我目前想到的就这些： 要忽略掉Excel的临时文件，或者每次commit前关闭Excel 需要统一commit的格式4，不然不方便review https://zhuanlan.zhihu.com/p/146683392 &amp;#8617; https://github.com/na-ka-na/ExcelCompare/issues/30 &amp;#8617; https://programmaticallyspeaking.com/git-diffing-excel-files.html &amp;#8617; https://cbea.ms/git-commit/ &amp;#8617; " }, { "title": "二进制漏洞检测工具 cwe_checker 学习", "url": "/posts/cwe-chekcer/", "categories": "tool, Rust", "tags": "binary analysis, rtfsc", "date": "2022-04-27 00:00:00 +0800", "snippet": " cwe_checker是一个Rust编写的，利用Ghidra反汇编出的PCode，对ELF二进制文件进行程序分析的工具，目前已覆盖十余种CWE规则的检测。安装与使用和大多数的Github项目一样，cwe_checker提供了本地安装和Docker两种方法。同时，它也作为核心组件被集成到了FACT_core1和EMBArk2等固件分析框架中。本地安装安装环境为Ubuntu-22.04的WSL，参考官方命令即可，需要手动安装openjdk才能使用headless版本的Ghidra。安装过程中会在根目录写入一些json配置文件，和CWE规则有关。安装完成后直接检测即可，命令如下：sudo apt install openjdk-11-jdkmake all GHIDRA_PATH=/path/to/ghidracwe_checker /path/to/binaryDocker安装在AMD64/AArch64平台均可通过Docker安装，如果不安装对应架构的镜像会导致运行速度慢5-10倍，详细查看这个PR。以M1 MBP为例，在命令行使用Docker的EntryPoint功能进行分析，参数如下：# 我为cwe_checker构建的AArch64的镜像docker pull cascadessjtu/cwe_checker# --rm 为运行后删除容器，适合单次检测# -v 为目录挂载，将主机目录对应到容器中的/tmp目录# 将/tmp/cwe_190_arm_clang.out作为参数传递给entrypoint指定的cwe_checker，开始分析docker run --rm -v /Users/chenxiang/Test/cwe_checker-0.5/test/artificial_samples/build:/tmp cascadessjtu/cwe_checker /tmp/cwe_190_arm_clang.out集成到项目FACT_core是FKIE-CAD和cwe_checker一起推出的项目。在FACT_core中，cwe_checker通过Docker安装。EMBArk的核心分析功能由emba提供。emba是一个纯shell脚本写成的命令行工具，它集成了各类安全分析工具。在emba中，cwe_checker通过本地安装，安装脚本见I120_cwe_checker.sh。对比参考自动化脚本来分析自己本地安装出现的问题，是一个不错的debug思路。功能分析批量测试作者提供的CWE测试集，也可以试试Juliet3给出的CWE测试集。首先是需要构建编译二进制数据集需要的Docker镜像，再通过SCons这个构建工具得到各种编译器生成，各种架构下，各位CWE的二进制文件，命令如下：make compile_test_files# 如果上一步出现问题了，修改一下SCons的构建命令即可docker run --rm -v $(pwd)/build:/home/cwe/artificial_samples/build cross_compiling sudo python3 -m SConsmake test源码分析扩展思路 参考nazz4，添加PCode符号执行引擎，减少误报 添加其他CWE/安全编码规则(MISRA5)，减少漏报 适配其他的二进制文件格式，比如RTOS 提高运行速度，参考星澜科技的BinCraft6项目合集扩展阅读 https://github.com/fkie-cad/FACT_core &amp;#8617; https://github.com/e-m-b-a/EMBArk &amp;#8617; https://samate.nist.gov/SRD/testsuite.php &amp;#8617; https://github.com/borzacchiello/naaz &amp;#8617; https://www.misra.org.uk &amp;#8617; https://github.com/StarCrossPortal/bincraft &amp;#8617; " }, { "title": "Github中的那些徽章到底是什么意思", "url": "/posts/github-sheilds/", "categories": "misc, visualization", "tags": "development", "date": "2022-04-24 00:00:00 +0800", "snippet": " 常见的Github徽章含义解读以及背后代表的软件开发/测试/效率工具介绍https://shields.io" }, { "title": "Learning The Rust Programming Language", "url": "/posts/Rust-learning-record/", "categories": "course", "tags": "rust", "date": "2022-04-20 00:00:00 +0800", "snippet": " 记录我学习Rust的过程为什么选择Rust？ 想对用Rust写的cwe_checker进行二次开发 学习更多有关内存安全的知识，也可以对应到C/C++中的一些程序分析方法 想学习一下现代编程语言的特点，也可以对应到C++的一些高级用法 了解函数式编程1如何学习Rust？感觉Rust的社区很活跃，学习资料也很多。我简单整理了一些如下： 书籍： The Rust Programming Language(the book)：Rust官方书籍 Rust语言圣经：Rust中文学习教程 Rust cookbook：collection of simple Rust examples Rusty Book：Awesome Rust + Rust Cookbook Rust编程之道：张汉东著 The Little Book of Rust Macros：宏小册 练习： Rustlings：Small Rust exercises Rust by Example：A collection of runnable Rust examples Rust语言实战：配套《Rust语言圣经》 课程： Rust培训：阿图教育，带着你学以上书籍 CS110L：Safety in Systems Programming KAIST CS431：Concurrent Programming rCore：从零开始用Rust写一个基于RISC-V架构的类Unix内核 论坛： Rust语言中文社区：包括一些专栏的分享 Rust语言开源杂志：月/季度杂志，包括了一些专栏 公众号： 2121实验空间 觉学社 数据库： crates.io：The Rust community’s crate registry RustSec：The Rust Security Advisory Database 论文： Learning and Programming Challenges of Rust: A Mixed-Methods Study Rust学习计划使用mermaid2生成的gantt图：gantt title Rust学习进度 dateFormat YYYY-MM-DD 阅读the book: active, thebook, 2022-04-18, 12d 练习rustlings: rustlings, 2022-04-18, 6d 做CS110L: cs110l, 2022-04-28, 7d 学习cwe_checker: active, cwe, 2022-04-20, 15d 阅读the book：没有看Chap19，很多概念还是不清楚，尤其是所有权和多线程，写起来还是有点吃力 做完配套练习rustlings：靠着编译器警告，连蒙带猜地做完了 CS110L Labs: 积累了一些Rust开发的经验，学习了并发的知识 阅读cwe_checker的源代码 阅读rust语言圣经 做配套练习rust语言实战扩展阅读 https://zh.wikipedia.org/wiki/函数式编程 &amp;#8617; https://mermaid-js.github.io/mermaid/ &amp;#8617; " }, { "title": "Detecting Kernel Memory Leaks in Specialized Modules With Ownership Reasoning", "url": "/posts/Detecting-kernel-memory-leaks/", "categories": "paper, security", "tags": "kernel, program analysis", "date": "2022-03-30 00:00:00 +0800", "snippet": " NIS-8018《系统安全前沿技术》的论文阅读作业，选取了漏洞检测领域的论文，了解一下Kernel的漏洞检测。作者实现了K-MELD的原型，使用了所有权（Ownership）机制对内核特定模块的内存泄漏进行了检测。作者在Linux内核中发现了218个bug，其中41个为CVE。论文阅读主要分析了Ownership机制中的逃逸者分析和消费者分析，并对论文的实验结果进行了分析。报告Slides论文复现 K-MELD is also extendable to other OS kernels like FreeBSD.文中提到K-MELD对其他的项目，尤其是OS项目也是有效果的，所以尝试分析一下FreeBSD。FreeBSD是Unix操作系统变种BSD系列之一（还有OpenBSD，NetBSD），可以在中科大的官网上找到镜像并通过虚拟机安装。K-MELD接受LLVM bitcode形式的输入，所以需要先把大型项目编译成bitcode。官网给出的bitcode都是针对于单个文件的，而FreeBSD也没有现成的bitcode，所以需要使用wllvm来生成FreeBSD的bitcode，相关的教程见tutorial-freeBSD。参考链接 GoSSIP论文阅读笔记：https://securitygossip.com/blog/2021/01/12/detecting-kernel-memory-leaks-in-specialized-modules-with-ownership-reasoning/" }, { "title": "The Cherno C++", "url": "/posts/the-cherno-cpp/", "categories": "course, youtube", "tags": "c/c++", "date": "2022-03-29 00:00:00 +0800", "snippet": "" }, { "title": "跟着阿布学编程之CPU眼里的代码", "url": "/posts/programming-in-cpu-view/", "categories": "course, bilibili", "tags": "c/c++", "date": "2022-03-29 00:00:00 +0800", "snippet": "" }, { "title": "HTTP命令行工具smms-cli开发简介", "url": "/posts/smms-cli/", "categories": "tool, python", "tags": "request, json", "date": "2022-03-28 00:00:00 +0800", "snippet": "因为写博客的时候经常用到http://sm.ms这个图床网站，所以希望能够写一个命令行交互的工具，更方便地上传图片，以及进行其他的操作。首先，放上用这个工具上传的pypi主页的照片，这也是我第一个pypi。一些选择其实网站提供的API功能很简单，甚至用cURL就可以搞定，但涉及到存储token和输入较长命令，还是想自己写一个简单的命令行工具。之所以选择python，而不是更加适合写命令行工具的rust，是希望能更熟悉python的项目结构。其实Github上已经有一些类似的工具，为了不重复地造轮子，我希望我写的这个工具有以下几个功能，我也列出了对应的解决办法。 开箱即用，不需要修改文件 -&amp;gt; 将token存储在文件中 命令简单，都是单次操作 -&amp;gt; 使用argparse来解析参数，将py脚本打包 结果好看，适合命令行环境 -&amp;gt; 使用pygments来渲染json文件 下载简单，项目结构良好 -&amp;gt; 参考pypi的项目结构，并发布到pypi 适合后续操作 -&amp;gt; 生成可以直接复制的md代码一些实践核心的代码部分其实很简单，用request库完成HTTP交互，用json库处理返回数据。我比较不熟悉的地方是发布到pypi，以及打包成命令行工具。官方文档更像是新手入门教程，相对简单，并不包含我打包成命令行工具时需要使用的entry_point的用法。所以我找了另外一个博客，有更加详细的说明，包括发布前对于dist的检查。总体来说我还是花了很多时间去找这些方法。倒不如平常多看看代码，对于这样的实现方法会更加有概念，而不是像这次一样，根据脑海中抽象的概念去寻找实际的API，非常麻烦。这次编写的代码中，我对于每个函数都加入了参数类型和返回类型的检查，虽然不知道这样做有什么用（更加像C/C++了？），但感觉是个好习惯。一些坑 在pypi上发布新版本的时候要查看dist目录下的版本，不然会报错重复上传 在发布成命令行工具（使用模块）和本地测试（使用文件时），import的目录不一样，不知道python有没有类似宏定义的方法来区分release和debugfrom smms import utils # 发布成命令行工具import utils # 测试脚本 使用upload的endpoint时，头部添加Content-Type会有问题，因为那个头部是默认的，取消即可常用命令总结下来，一次简单的pypi发布流程为，可以把这些命令集成在Github Action中vim ~/.pypirc # 添加token# 修改项目代码，更新版本号python3 -m build # 构建pip3 install . # 本地安装，测试功能python3 -m twine upload dist/* # 发布到pypi在flatten list的时候用了一个one-line的嵌套for循环的方法，不需要借助numpy&amp;gt;&amp;gt;&amp;gt; l = [[1,2],[3,4]]&amp;gt;&amp;gt;&amp;gt; [item for sublist in list for item in sublist]&amp;gt;&amp;gt;&amp;gt; l =[1,2,3,4]参考链接 官方文档：https://packaging.python.org/en/latest/tutorials/packaging-projects/ Pypi发布：https://blog.csdn.net/weixin_40156487/article/details/107811365 Github Actions操作： https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/" }, { "title": "Hackergame 2021 writeup", "url": "/posts/hackergame-writeup/", "categories": "writeup, OJ", "tags": "reverse, pwn, crypto, misc", "date": "2022-03-28 00:00:00 +0800", "snippet": " Hackergame is an CTF held by USTC annually" }, { "title": "GeekGame 1st writeup", "url": "/posts/GeekGame-writeup/", "categories": "writeup, OJ", "tags": "reverse, pwn, crypto, misc", "date": "2022-03-28 00:00:00 +0800", "snippet": " GeekGame is an CTF held by PKU annually, started from 2021" }, { "title": "picoCTF writeup for RE", "url": "/posts/picoCTF-Reverse-Engineering/", "categories": "writeup, OJ", "tags": "reverse", "date": "2022-03-26 00:00:00 +0800", "snippet": " 前段时间花了3-4天打了CMU举办的picoCTF 2022，发现这个比赛相比于国内的CTF比赛来说题目阶梯性更好，范围更广，也更加让人感兴趣（可能是因为题目简单容易拿flag）。于是打算刷一下picoCTF的其他题目，也都是往期picoCTF的题目合集，希望能提高自己的逆向能力。之后也可以考虑考虑刷刷其他的入门级CTF题库，比如Reversing.Kr和一些国内的平台。picoCTF 2022先附上结果，Pwn和Re的最后两道题不会做，之后好好看看；Misc和Crypto通过Google以后都能做出来；Web就图一乐好了。言归正传，开始picoCTF的刷题之旅吧～Wizard Like首先是一道没做出来的Re：https://github.com/elemental-unicorn/picoctf-2022/tree/master/reverse_eng/wizard-likeTransformation将原ASCII字符串，两个字符一组，通过移位方式组成一个新的unicode字符并写入文件。反向上述操作即可，需要熟悉python的字符操作。with open(&#39;enc&#39;,&#39;r&#39;) as f: enc = f.read() flag = &#39;&#39; for c in enc: flag += chr(ord(c) &amp;gt;&amp;gt; 8) flag += chr(ord(c) - ((ord(c) &amp;gt;&amp;gt; 8) &amp;lt;&amp;lt; 8))一个有趣的地方在于，原文件是按字符而不是字节写入的。如果使用&#39;rb&#39;方式读取后直接chr()字符值会报错，是因为unicode的字符范围为0-0x10ffff。但Unicode超过ASCII的部分不是直接和二进制数值对应的，会有二次编码，实际的二进制值是超过0x10ffff的。比如，’灩’.encode() != ord(‘灩’)。keygenme-py看起来比较复杂的一个python菜单程序，如果顺序分析会比较麻烦（而且很多单词都看不懂）。其实大致逻辑就是需要crack这个用fernet加密的python程序，通过逆向分析jump_into_full这个标志变量的调用关系，可以得到破解的流程为：menu_trial-&amp;gt;enter_license-&amp;gt;check_key。正确的key即为flag，至于这个破解后的python程序怎么运行其实和题目关系不大，可以用作本地验证flag。重点分析check_key，其首先检查了flag长度是否为程序头部定义的三个部分之和，随后检查固定的第一部分&quot;picoCTF{1n_7h3_|&amp;lt;3y_of_&quot;。随后检查第二部分，将其与用户名的sha256值按照打乱的顺序比较，通过即可。from hashlib import sha256username_trial = &quot;ANDERSON&quot;order = [4,5,3,6,2,7,1,8]flag = &quot;&quot;# python3中需要先encodeusername_trial_hash = sha256(username_trial.encode()).hexdigest()for i in order: flag += username_trial_hash[i]flag = &quot;picoCTF{1n_7h3_|&amp;lt;3y_of_{}}&quot;.format(flag)crackme-py提供了两个函数，choose_greastest只是简单地返回用户输入两个数的最大值，似乎没用到decode_secret。然而程序头部的提示它将一个重要的数值加密并隐藏在了程序里面。其实只需要对bezos_cc_secret调用解密函数即可，是一个ROT47的解密函数。decode_secret(bezos_cc_secret)shop题目是Go语言写的，函数表很丰富，但Ghidra的逆向效果不太好，插件都只适合老版本的Ghidra。分析menu函数的关键逻辑，没有对购买数量的符号做检查，或者说没有在重新计算coins时使用绝对值，导致可以通过购买负数个商品来获得coins，达到购买flag需要的coins。from pwn import *context(arch=&quot;i386&quot;, os=&quot;linux&quot;, log_level=&quot;debug&quot;)host = &quot;mercury.picoctf.net&quot;port = 24851p = remote(host, port)p.recvuntil(b&quot;Choose an option: \\n&quot;)p.sendline(b&quot;0&quot;)p.recvline()# not check sign, cause under flowp.sendline(b&quot;-6&quot;)# get flagp.recvuntil(b&quot;Choose an option: \\n&quot;)p.sendline(b&quot;2&quot;)p.recvline()p.sendline(b&quot;1&quot;)recv = p.recv().decode()flag = recv[recv.find(&quot;[&quot;) + 1 : recv.find(&quot;]&quot;)].split(&quot; &quot;)flag = &quot;&quot;.join([chr(int(c)) for c in flag])Hurry up! Wait 初步动态分析：一开始以为是一个PE文件，结果是ELF。先跑一下程序（需要按照libgnat-7.so.1），输入后没有反应。 静态分析： 分析程序类型：在Ghidra里面查看，函数表很丰富。按照函数名称排序，发现有一系列ada开头的函数。使用strings分析，也可以发现GNAT Version: 7.5.0这样的字符串。通过Google发现这是一个叫做Ada的语言，采用GNAT进行编译。可以自己编译一个简单的Hello-world程序，发现其入口点为entry。 分析程序功能：定位到entry函数，并进入0x00101fcc。发现在__gnat_initialize和gnat_finalize之间有三个功能函数。通过查看call trees，可以简单看出第一个函数是负责初始化的。而第二个函数0x0010298a比较特别，只调用了ada__calendar__delays__delay_for这一个库函数，这个库函数实现了sleep的效果。还有其他27个自定义的函数。这27个自定义的函数功能几乎一样，都调用了Ada.Text_IO.put，且第二个参数都一样，为0x1。查看APi发现，第一个参数为要打印的字符，第二个参数即stdout。而去第一个参数的位置查看，出现了”picoCTF{}”等字符。 可以直接手动查看27个函数的调用位置，恢复出flag。 动态调试：可以直接通过gdb的jump命令绕过ada__calendar__delays__delay_for函数。不过函数的实际执行地址是不确定的，而且由于被stripped了，只能先断在这个函数，然后绕过更加底层的system.os_primitives.timed_delay，即可打印出flag。(gdb) b ada__calendar__delays__delay_for(gdb) r(gdb) jump *0x7ffff796c360gogo 初步动态分析：需要验证输入的password。 静态分析： Go语言写的，第一个检查逻辑在checkPassword。可以看到有32bytes的可打印字符写在了栈上。首先对输入长度做检查，随后将输入逐位与栈上$esp-0x40处长为0x20的字符串异或，再将结果与栈上$esp-0x20处长为0x20的字符串比较。 随后需要经过ambush的检查，main提示需要输入hash前的数值，并将用户输入传递给ambush。ambush首先将输入转化为bytes数组，经过md5后与栈上的字符串比较。 动态分析： 程序在运行的时候开了5个轻量级进程LWP（Go并发编程的特点），会影响调试的顺序，最好使用ni和si来调试。 在checkPassword里比较的代码0x080d4b21处下断点，通过x /8x $esp-0x20拿到栈上的值，利用异或的性质解出原输入。 提取出ambush中的md5sum值，通过破解网站得到unhash value。 # get checkPassword&#39;s inputfrom Crypto.Util.number import long_to_bytesbsrc = [ 0x38313638, 0x31663633, 0x64336533, 0x64373236, 0x37336166, 0x62646235, 0x39383338, 0x65343132,]bdst = [ 0x5D47534A, 0x54034541, 0x0A5A025D, 0x0D455753, 0x555D0005, 0x0E011054, 0x4B575541, 0x01465045,]bsrc = b&quot;&quot;.join[[long_to_bytes(b](::-1) for b in bsrc])bdst = b&quot;&quot;.join[[long_to_bytes(b](::-1) for b in bdst])password = b&quot;&quot;.join([(bsrc[i] ^ bdst[i]).to_bytes(1, &quot;big&quot;) for i in range(len(bsrc))])# get ambush&#39;s input# look up bsrc on &amp;lt;https://crackstation.net&amp;gt; or just google it to get the unhashed valueprint(bsrc)# get_flagfrom pwn import *context(arch=&quot;i386&quot;, os=&quot;linux&quot;, log_level=&quot;debug&quot;)host = &quot;mercury.picoctf.net&quot;port = 4052p = remote(host, port)p.recvuntil(b&quot;Enter Password: &quot;)p.sendline(password)p.recvuntil(b&quot;What is the unhashed key?\\n&quot;)p.sendline(b&quot;goldfish&quot;)p.recv()Let’s get dynamic需要分析出这段汇编代码读取的内容，提示在调试器里面运行。看起来.LC0存储了一些8进制的unicode字符，所以动态分析比较好。需要在x86_64的机器里面将汇编编译成可执行文件。gcc -c chall.s -o chall.ogcc chall.o -o chall先进行静态分析，main函数首先把.LC0段的数据借助rax和rdx存放到栈上，每次8字节。随后再将一部分硬编码的数据存放到栈上。此时，rbp-0x90到rbp-0x20都是已经填入的数据。随后通过fgets读入0x31字节的变量，经过循环之后，调用memcmp函数。动态调试后，随意输入都会显示flag正确，有点奇怪。在memcpy前下断点，查看参数发现一部分flag，但长度只有0x12。之前调用的strlen，发现其返回结果为0x12，所以猜测strlen决定了memcmp第二个参数的长度。所以需要hookstrlen的返回值，即可打印完整的flag。有几种hook的方法，包括修改strlen返回值，或者直接在汇编代码中修改。考虑到这里strlen在循环中被调用了多次，所以直接修改汇编代码更加方便。进行如下修改，再查看memcmp的参数即可。# call strlen@PLTmovq $49, %rax # AT&amp;amp;T formatps：可以使用ltrace来追踪运行时调用的库函数not crypto给了二进制文件，提示虽然它虽然是包括密码学操作的，但不是一个密码学的题目，所以题目的关键应该不是分析加密逻辑。随机输入，发现密码错误，猜测需要输入正确的flag。发现有memcmp函数，直接下断点去找参数即可。用Ubuntu-18.04会有问题，不知道为啥。b memcmprunx /s $rdiEasy as GDB提示需要爆破，可以使用gdb-python。需要输入正确的flag才能通过检测。最后的检测是逐位与数据段的字符数组比较，考虑爆破。需要在000108c4函数内部爆破，所以需要定位到爆破的位置，逐位爆破。通过继承gdb.Breakpoint类，来统计一次运行中比较的次数，在爆破某一位时，如果某个输入的比较次数比其他输入都多1，则说明当前字符爆破成功。import gdbimport stringfrom queue import Queue, EmptyMAX_FLAG_LEN = 200COMPARE_LOC = &quot;*0x5655598e&quot;PASS_LOC = &quot;*0x56555a72&quot;ALPHABET = string.ascii_letters + string.digits + &#39;{}_&#39;class ComparePoint(gdb.Breakpoint): def __init__(self, req_hit, queue, *args) -&amp;gt; None: super().__init__(*args) self.silent = True self.hit = 0 self.req_hit = req_hit self.queue = queue def stop(self): self.hit += 1 if self.hit == self.req_hit: al = gdb.parse_and_eval(&quot;$al&quot;) bl = gdb.parse_and_eval(&quot;$dl&quot;) self.queue.put(al == bl) return Falseclass PassPoint(gdb.Breakpoint): def __init__(self, *args) -&amp;gt; None: super().__init__(*args) self.silent = True self.hit = 0 def stop(self): self.hit += 1 return Falsequeue = Queue()gdb.execute(&quot;set disable-randomization on&quot;)gdb.execute(&quot;delete&quot;)pp = PassPoint(PASS_LOC)flag = &quot;&quot;for i in range(1, MAX_FLAG_LEN): for c in ALPHABET: cp = ComparePoint(i, queue, COMPARE_LOC) print(&quot;bruting with &quot; + flag + c) gdb.execute(&quot;run &amp;lt;&amp;lt;&amp;lt; &quot; + flag + c) try: res = queue.get(timeout=1) cp.delete() if res: flag += c print(&quot;\\ncurrent flag is {}\\n&quot;.format(flag)) break except Empty: gdb.execute(&quot;q&quot;) if pp.hit: print(&quot;flag found: {}&quot;.format(flag)) gdb.execute(&quot;q&quot;) 用python扩展gdb：https://segmentfault.com/a/1190000005718889 官方文档：https://sourceware.org/gdb/current/onlinedocs/gdb/Python-API.htmlreverse_cipher在main函数里打开两个文件，从flag.txt中读取0x18字节的数据，并在”picoCTF{xxx}”的中间部分进行编码操作，将结果写入到rev_this。根据rev_this的值逆向出flag.txt即可。rev_flag = open(&#39;rev_this&#39;,&#39;r&#39;).read()for i in range(8,23): if i &amp;amp; 0x1: flag += chr(ord(rev_flag[i])+2) else: flag += chr(ord(rev_flag[i])-5)OTP Implementationasmx86系列逆向题目asm1给定asm1函数参数，需要获取输出。人工分析跳转即可，或者也可以采用unicorn来执行。arg = 0x2e0flag = arg - 0xaasm2分析给定asm2函数两个参数，获取输出。需要分析好参数位置。arg1,arg2 = 0x4,0x2dwhile arg1 &amp;lt; 0x5fa1: arg2 += 1 arg1 +=0xd1asm3分析给定asm2函数三个参数，获取输入。主要考察eax，ax，al，ah的区别。使用bytearray来处理位运算，或者使用unicorn或者其他在线模拟器模拟执行，需要自己手动把参数压栈，并调用asm3。用python模拟有点麻烦，处理溢出以及寄存器分片不方便，其实可以直接编译执行，注意需要标注intel格式的汇编代码。arg1,arg2,arg3 = 0xd73346ed,0xd48672ae,0xd3c8b139arg1 = arg1.to_bytes(4, &quot;little&quot;)arg2 = arg2.to_bytes(4, &quot;little&quot;)eax = arg1[2] &amp;lt;&amp;lt; 0x8eax = eax &amp;lt;&amp;lt; 0x10 # 溢出了eax = eax - arg2[0] # 位数不确定eax = eax + (arg2[1] &amp;lt;&amp;lt; 0x8)ax = eax &amp;amp; 0xffffax = ax ^ (arg3 &amp;amp; 0xffff)eax = ((eax &amp;gt;&amp;gt; 0x10) &amp;lt;&amp;lt; 0x10) + axprint(hex(eax))编译执行的Makefile如下：all: gcc -m32 -masm=intel -c asm3.s -o asm3.1.o gcc -m32 -c asm3.c -o asm3.2.o gcc -m32 asm3.1.o asm3.2.o -o asm3.oclean: rm asm3.1.o asm3.2.o asm3.o使用unicorn模拟的脚本如下，和模拟器原理类似，相对复杂的是需要自己布局，但获取信息更加灵活。from unicorn import Uc, UcError, UC_ARCH_X86, UC_MODE_32, UC_HOOK_CODEfrom unicorn.x86_const import UC_X86_REG_EBP, UC_X86_REG_EAXfrom pwn import asm, p32# code to be emulatedX86_CODE32 = asm(&#39;&#39;&#39;start: mov ah,BYTE PTR [ebp+0x9] shl ax,0x10 sub al,BYTE PTR [ebp+0xd] add ah,BYTE PTR [ebp+0xe] xor ax,WORD PTR [ebp+0x12] &#39;&#39;&#39;)# memory address to start emulationADDRESS = 0x1000000STACK = 0x2000000print(&quot;Emulate i386 code&quot;)def hook_code(mu, address, size, user_data): print(&#39;&amp;gt;&amp;gt;&amp;gt; Tracing instruction at 0x%x, instruction size = 0x%x&#39; % (address, size))try: # Initialize emulator mu = Uc(UC_ARCH_X86, UC_MODE_32) # map memory mu.mem_map(ADDRESS, 2*1024*1024) mu.mem_map(STACK, 2*1024*1024) # write machine code mu.mem_write(ADDRESS, X86_CODE32) # set stack frame frame = b&#39;A&#39;*8 + p32(0xd73346ed) + p32(0xd48672ae) + p32(0xd3c8b139) mu.mem_write(STACK, frame) # initialize machine registers mu.reg_write(UC_X86_REG_EBP, STACK) # use hook to debug mu.hook_add(UC_HOOK_CODE, hook_code) # start emulation in infinite time and unlimited instructions mu.emu_start(ADDRESS, ADDRESS + len(X86_CODE32)) print(&quot;EMulation done. Below is the CPU context&quot;) r_eax = mu.reg_read(UC_X86_REG_EAX) print(&quot;&amp;gt;&amp;gt;&amp;gt; EAX = 0x%x&quot; % r_eax)except UcError as e: print(&quot;ERROR: %s&quot; % e)asm4采用asm3的方法编译出二进制程序，直接运行出结果。需要修改jne 0x514 &amp;lt;asm4+23&amp;gt;为jne asm4+23才能正确地找到相对地址，也可以使用内联汇编来嵌入汇编代码到目标文件中。程序逻辑如下：s = &#39;picoCTF_a3112&#39;res = 0x246for i in range(1,len(s)-1): res += (ord(s[i+1])-ord(s[i-1]))print(hex(res))driodsAndroid 系列逆向题目入门教程：https://nusgreyhats.org/posts/writeups/introduction-to-android-app-reversing/droids0通过android virtual device运行，显示没有输出到终端。最后在bug report中找到flag。通过jadx解出apk中的java代码，分析逻辑，MainActivity.java的按钮调用了FlagstaffHill.java中的getFlag方法，其将flag以INFO等级输出到log。可以通过Android Studio的logcat或者adb的logcat来获取flag。droids1通过AVD运行，显示需要输入password。通过jadx反汇编出java代码，关键逻辑在FlagstaffHill.java中的getFlag方法。其将输入与ctx.getString(R.string.password)比较，如果通过则输出flag。搜索字符串找到R.string.password即可。也可以选择逆向fenugreek(input)方法，这样麻烦一点。droids2类似的程序逻辑，提示应该和smali代码有关。将getFlag的代码直接提取到exp.java中运行的道password，再在模拟器中获得flag。import java.io.Console;public class exp { public static String getFlag() { String[] witches = { &quot;weatherwax&quot;, &quot;ogg&quot;, &quot;garlick&quot;, &quot;nitt&quot;, &quot;aching&quot;, &quot;dismass&quot; }; int second = 3 - 3; int third = (3 / 3) + second; int fourth = (third + third) - second; int fifth = 3 + fourth; int sixth = (fifth + second) - third; String password = &quot;&quot;.concat(witches[fifth]).concat(&quot;.&quot;).concat(witches[third]).concat(&quot;.&quot;) .concat(witches[second]).concat(&quot;.&quot;).concat(witches[sixth]).concat(&quot;.&quot;).concat(witches[3]).concat(&quot;.&quot;) .concat(witches[fourth]); return password; } public static void main(String[] args) { System.out.println(getFlag()); }}droids3类似的程序逻辑，但点击输入后没用。查看反汇编后的java代码发现getFlag调用了none函数，返回了固定的明文。yep函数则调用了cilantro，看起来可以获得flag。使用apktool解包，直接修改smali/com/hellocmu/picoctf/FlagstaffHill.smali的代码，将getFlag中的none改为yep。然后重新打包，并签名即可，再放入AVD运行即可。apktool decode three.apk --no-resapktool build three -o recompile/three.apkjava -jar ~/Tools/uber-apk-signer-1.2.1.jar -a recompiledroids4类似的程序逻辑，将getFlag中的逻辑提取出来，得到字符串”alphabetsoup”，然后返回”call it”。结合提示，在getFlag中调用应该是能够获取flag的cardamom函数即可。但是如果直接在getFlag的最开始调用这个函数，直接绕过password的检查，运行的时候会闪退，不知道为啥。在FlagstaffHIll.smali的条件判断语句if-eqz v5, :cond_0后添加如下smali代码来触发函数：invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-&amp;gt;cardamom(Ljava/lang/String;)Ljava/lang/String;move-result-object v0return-object v0ARMssemblyARM系列逆向题目ARMssembly 0提供了一段ARM汇编，需要分析出给定两个输入后的输出结果。之前对于ARM汇编不太熟悉，使用了在线汇编器https://godbolt.org进行辅助学习。首先将两个参数（分别存储在x0+8和x0+16）经过atoi变成int类型的值，再将两个值作为参数调用func1。func1首先是交换了两个参数的位置（w0和w1），并返回较大的值。flag = 4112417903flag = hex(flag)[2:].rjust(8,&#39;0&#39;)flag = &quot;picoCTF{&quot; + flag + &quot;}&quot; ARMssembly 1需要在给定变量（写死在了func里面）的情况下，提供什么参数打印出win。分析win的调用点，推出cmp x0, 0成立，即func需要返回0。分析func的功能，首先将81，0（通过wzr寄存器），3依次写入sp+16,20,24。随后以sp+28为临时变量，使用lsl来进行逻辑左移，sdiv进行带符号除法，最后与输入进行减法，得到返回值。根据之前的分析，sdiv后的结果即为需要输入的变量值。a,b,c = 81,0,3d = a &amp;lt;&amp;lt; bd = a // cflag = hex(d)[2:].rjust(8,&#39;0&#39;)flag = &quot;picoCTF{&quot; + flag + &quot;}&quot; ARMssembly 2需要分析给定输入下的输出。分析printf的第一个字符串，可知输出格式为%ld。func1中是一个循环结构，首先给sp+24,+28置零，随后进入.L2。.L2为循环条件，.L3为循环体。每次循环，sp+24 += 3，sp+28 += 1，当sp+28等于输入值时循环结束，并返回sp+24的值，相当于进行了乘法。flag = 2610164910flag *= 3flag = hex(flag)[-8:].rjust(8,&#39;0&#39;) # 注意只取低4字节flag = &quot;picoCTF{&quot; + flag + &quot;}&quot;ARMssembly 3和ARMssembly2类似，需要分析给定输入下的输出。func1是一个循环，在循环体内部为条件语句，并调用了func2。每次循环将输入参数左移一位，并判断其LSB，如果为1，则将结果加3，即实际上是在二进制表示下统计1的个数。from pwn import p32arg = 469937816flag = 0while arg &amp;gt; 0: if arg &amp;amp; 0x1: flag += 3 arg = arg &amp;gt;&amp;gt; 1flag = &quot;{:0&amp;gt;8x}&quot;.format(flag) # 使用python的格式化字符串flag = &quot;picoCTF{&quot; + flag + &quot;}&quot;ARMssembly 4通过asm系列题目学到了，可以直接编译后运行，得到flag。代码逻辑有点长，编译成二进制后通过ghidra写出逆向脚本。好吧其实很简单，弄清楚跳转就行。arg = 3434881889arg += 100arg += 0xdarg += 2print(&#39;picoCTF{&#39;+hex(arg)[2:]+&#39;}&#39;)vault-doorJava系列逆向题目，picoCTF想出了一个类似于科幻闯关的故事，还挺有意思。vault-door-training虽然不太懂Java语法，但能看懂程序逻辑就行。flag写在程序里面了，直接匹配字符串。vault-door-1在checkPassword里面，按照打乱的顺序逐字节地判断flag正确性。按照顺序赋值给新的字符串即可。可以使用正则表达式（VS Code自带）来提取出重复的赋值操作，exp太长就不放了。vault-door-3在checkPassword里面，分段对字符串进行操作，逆向上述操作的功能和顺序即可。buffer = list(&quot;jU5t_a_sna_3lpm18g947_u_4_m9r54f&quot;)flag = [&quot;A&quot; for i in range(32)]for i in range(17, 32, 2): flag[i] = buffer[i]for i in range(16, 32, 2): flag[46 - i] = buffer[i]for i in range(8, 16): flag[23 - i] = buffer[i]for i in range(8): flag[i] = buffer[i]flag = &quot;&quot;.join(flag)flag = &quot;picoCTF{&quot; + flag + &quot;}&quot;vault-door-4在checkPassword里面，将字符串与ASCII值（decimal,hexdecimal,octal）比较，对应ASCII表恢复即可，需要注意python里面octal的前缀为0o。flag = &quot;&quot;for i in range(32): if i &amp;lt; 24: flag += chr(bytes[i]) else: flag += bytes[i]flag = &quot;picoCTF{&quot; + flag + &quot;}&quot;print(flag)vault-door-5在checkPassword里面，先后经过url编码和base64编码，逆向上述操作即可。from base64 import b64decodefrom urllib.parse import unquote_plusenc_flag = ( &quot;JTYzJTMwJTZlJTc2JTMzJTcyJTc0JTMxJTZlJTY3JTVm&quot; + &quot;JTY2JTcyJTMwJTZkJTVmJTYyJTYxJTM1JTY1JTVmJTM2&quot; + &quot;JTM0JTVmJTY1JTMzJTMxJTM1JTMyJTYyJTY2JTM0&quot;)flag = b64decode(enc_flag).decode()flag = unquote_plus(flag)flag = &quot;picoCTF{&quot; + flag + &quot;}&quot;print(flag)vault-door-6在checkPassword里面，逐位与0x55异或。由于两次异或后结果相同，重复该操作即可。flag = [0x3b,...,0x6d]flag = [chr(b ^ 0x55) for b in flag]flag = &quot;&quot;.join(flag)flag = &quot;picoCTF{&quot; + flag + &quot;}&quot;print(flag)vault-door-7在passwordToIntArray里面，将4个byte一组转化为1个int，逆向该操作即可。from Crypto.Util.number import long_to_bytesints = [ 1096770097, 1952395366, 1600270708, 1601398833, 1716808014, 1734304867, 942695730, 942748212,]flag = b&quot;&quot;.join([long_to_bytes(i) for i in ints]).decode()flag = &quot;picoCTF{&quot; + flag + &quot;}&quot;print(flag)vault-door-8在scramable中，对于每个char，按照一定的顺序调用switchBits。创建rescramable，复用switchBits方法，按照相反的顺序恢复。public void rescramble(char[] password) { for (int b = 0; b &amp;lt; password.length; b++) { char c = password[b]; c = switchBits(c, 6, 7); c = switchBits(c, 2, 5); /* d = switchBits(d, 4, 5); e = switchBits(e, 5, 6); */ c = switchBits(c, 3, 4); c = switchBits(c, 0, 1); c = switchBits(c, 4, 7); /* c = switchBits(c,14,3); c = switchBits(c, 2, 0); */ c = switchBits(c, 5, 6); c = switchBits(c, 0, 3); c = switchBits(c, 1, 2); password[b] = c; } String flag = String.valueOf(password); flag = &quot;picoCTF{&quot; + flag + &quot;}&quot;; System.out.println(flag);}public boolean checkPassword(String password) { // ... rescramble(expected); return Arrays.equals(scrambled, expected);}speeds and feeds模拟了工业场景中CNC车床的输出数据。使用了一种叫做G-Code的语言，需要将其可视化。nc mercury.picoctf.net 33596 &amp;gt; chall.nc参考链接 题目地址：https://play.picoctf.org/practice?category=3 picoCTF writeup from 2018 to 2021：https://github.com/Dvd848/CTFs" }, { "title": "Reversing.Kr writeup", "url": "/posts/ReversingKr/", "categories": "writeup, OJ", "tags": "reverse", "date": "2022-03-26 00:00:00 +0800", "snippet": " Pwn题有很多刷题的平台，比如pwnable.cn/.kr/.tw，但RE题好像目前只找到这一个平台，看起来稍微有点老。好在涉及的平台范围还算广，而且都像是较为传统的逆向题目，可以尝试做一做。参考链接： 题目地址：http://reversing.kr 其他writeup：https://hackmd.io/@zeze/BJziWsCWw" }, { "title": "Translating C to Safer Rust", "url": "/posts/C2SaferRust/", "categories": "paper, PL", "tags": "program analysis", "date": "2022-03-26 00:00:00 +0800", "snippet": " GoSSIP推荐的来自程序语言领域subtitle: ACM OOPSLA 21的论文，讲述了C2Rust生成的带有unsafe标签的rust代码存在的安全问题，以及对其中raw pointer这一问题的解决方法。感觉rust是一门在程序分析和软件安全方面有发展前景的语言，趁着这个机会可以好好学一下rust，了解更多关于软件安全的概念。前言Rust通过ownership等检查机制，可以实现内存安全和线程安全，避免了C/C++中出现的许多问题。目前有很多主流的开源项目（Linux，Firefox，Android）的部分模块开始用rust重写，这个工作可以借助自动化的工具c2rust来完成。c2rust仍然存在安全问题Rust程序员在使用unsafe机制的时候可能引入安全问题，但这一类代码（从crates.io上可以找到很多）不在文章的讨论范围之内。文章分析的是c2rust生成的代码存在的问题，首先需要c2rust生成代码的语料库。考虑到c2rust对c语言编译系统的适配性，作者选取了17个c语言的项目作为分析对象，如下图所示。值得关注的是， 生成的rust函数中大部分有unsafe标签 只有生成过程中引入的辅助函数才被标记为safe 所有从C程序中直接翻译过来的函数都被标记为unsafe，但实际上有些不是必要的这个结果也很好理解，毕竟c2rust的作者也说到，他们的初步目的仅仅是syntax意义上的正确翻译。随后，作者对于rust提出了五类unsafety的来源做了进一步的细化，经过一些增强的假设（比如内存分配函数都是safe的）后，映射到了几类feature： RawDeref：解引用一个raw pointer Global：读/写/引用一个mutable的全局/外部变量 Union：读一个C风格的，无标签的Union Extern：调用一个程序外部的函数，比如malloc/free…针对这些feature，作者基于Rust High-level IR分析，将上述语料库进行了再次分类，发现最常见的问题是RawDeref，Global和Extern。随后，作者在function-level对这些feature又做了一次分析。每个受到影响的函数都可能包括几种问题，不过总结下来，作者选择主要分析RawDeref。作者分析RawDeref问题主要有以下几个来源，大部分都可以通过rust的一些安全编程特性来缓解 程序提供的API中的公共签名 自定义的内存分配函数malloc 从C风格的void *转化过来 作为外部函数的参数/返回值 C风格的数组/指针运算为了对指针问题进一步分析，作者还根据来源的类型将指针分为了四类： Lifetime：可以sink到以下三类 VoidPtr：* const void 或 * mut void类型 ExternPtr：外部调用的返回值 PtrArith：指针算术运算的结果如何优化c2rust生成的代码作者基于c2rust的翻译过程，实现了将raw pointer转化为rust中的safe reference的功能。转化的过程中需要ownership和lifetime的信息，所以作者选择了对于自定义Lifetime类型的指针进行优化。感想 首先我尝试了自己搭建c2rust的环境，但从crates.io上下载的代码有问题。随后从Github拉取项目后，源码编译才成功。 尽管c2rust生成代码存在许多问题，在一篇论文里只需要关注一个主流的问题即可。 由于我没有rust基础，所以看不懂作者对于raw pointer问题的优化方案以及实现方法，但对于rust编译器的严格检查有了一些体会。 PL方面的会议还是很考验语言功底的，如果不了解rust提供的指针类型以及rust的安全机制，是肯定看不懂这篇文章的。参考链接 论文地址：https://dl.acm.org/doi/10.1145/3485498 GoSSIP论文阅读笔记：https://mp.weixin.qq.com/s/W-Qkg7eALuuqFUDSbM2euA c2Rust：https://c2rust.com" }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "", "date": "2021-01-04 07:32:00 +0800", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp;amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&amp;lt;project-id&amp;gt;.&amp;lt;region&amp;gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;amp;client_id=XYZ.apps.googleusercontent.com&amp;amp;redirect_uri=ABCDEFGEnter verification code: &amp;lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&amp;gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id - version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7 __author__ = &#39;pete.frisella@gmail.com (Pete Frisella)&#39; # OAuth 2.0 Client Settings AUTH_CONFIG = { &#39;OAUTH_CLIENT_ID&#39;: &#39;YOUR_CLIENT_ID&#39;, &#39;OAUTH_CLIENT_SECRET&#39;: &#39;YOUR_CLIENT_SECRET&#39;, &#39;OAUTH_REDIRECT_URI&#39;: &#39;%s%s&#39; % ( &#39;https://chirpy-test-XXXXXX.ue.r.appspot.com&#39;, &#39;/admin/auth&#39; ) } # XSRF Settings XSRF_KEY = &#39;OnceUponATimeThereLivedALegend&#39; You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deploy Services to deploy: descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml] source: [/tmp/google-analytics-super-proxy/src] target project: [chirpy-test-XXXX] target service: [default] target version: [VESRION_NUM] target url: [https://chirpy-test-XXXX.ue.r.appspot.com] Do you want to continue (Y/n)? Y Beginning deployment of service [default]... ╔════════════════════════════════════════════════════════════╗ ╠═ Uploading 1 file to Google Cloud Storage ═╣ ╚════════════════════════════════════════════════════════════╝ File upload done. Updating service [default]...done. Setting traffic split for service [default]...done. Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com] You can stream logs from the command line by running: $ gcloud app logs tail -s default To view your application in the web browser run: $ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID pv: proxy_endpoint: &#39;https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&amp;lt;ID FROM SUPER PROXY&amp;gt;&#39; cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &amp;#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "", "date": "2019-08-11 00:34:00 +0800", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp;amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &amp;lt;GH_USERNAME&amp;gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &amp;lt;GH_USERNAME&amp;gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &amp;lt;GH_USERNAME&amp;gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem &quot;jekyll-theme-chirpy&quot; in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.2&quot;, &quot;&amp;gt;= 3.2.1&quot;+ gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.3&quot;, &quot;&amp;gt;= 3.3.0&quot; And then execute the following command: bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "", "date": "2019-08-08 14:10:00 +0800", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&amp;lt;author_id&amp;gt;: name: &amp;lt;full name&amp;gt; twitter: &amp;lt;twitter_of_author&amp;gt; url: &amp;lt;homepage_of_author&amp;gt;And then set up the custom author in the post’s YAML block:---author: &amp;lt;author_id&amp;gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=&quot;700&quot; height=&quot;400&quot; }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=&quot;700&quot; h=&quot;400&quot; }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&amp;lt;img src=&quot;https://cdn.com/path/to/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&amp;lt;img src=&quot;/img/path/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&amp;gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho &#39;No more line numbers!&#39;```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=&quot;path/to/file&quot; }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains &#39;Pack&#39; %} This product&#39;s title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo &quot;The command was not successful.&quot;; #do the needful / exitfi;Specific filename@import &quot;colors/light-typography&quot;, &quot;colors/dark-typography&quot;Reverse Footnote The footnote source &amp;#8617; The 2nd footnote source &amp;#8617; " } ]
